// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reservation/proto/reservation.proto

/*
Package reservation is a generated protocol buffer package.

It is generated from these files:

	reservation/proto/reservation.proto

It has these top-level messages:

	Request
	Result
*/
package reservation

import (
	"github.com/AleckDarcy/ContextBus"
	cb_context "github.com/AleckDarcy/ContextBus/context"
	proto "github.com/golang/protobuf/proto"
	"github.com/rs/zerolog/log"
)
import fmt "fmt"
import math "math"
import cb "github.com/AleckDarcy/ContextBus/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	CustomerName string      `protobuf:"bytes,1,opt,name=customerName,proto3" json:"customerName,omitempty"`
	HotelId      []string    `protobuf:"bytes,2,rep,name=hotelId,proto3" json:"hotelId,omitempty"`
	InDate       string      `protobuf:"bytes,3,opt,name=inDate,proto3" json:"inDate,omitempty"`
	OutDate      string      `protobuf:"bytes,4,opt,name=outDate,proto3" json:"outDate,omitempty"`
	RoomNumber   int32       `protobuf:"varint,5,opt,name=roomNumber,proto3" json:"roomNumber,omitempty"`
	CBPayload    *cb.Payload `protobuf:"bytes,10001,opt,name=CBPayload" json:"CBPayload,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

func (m *Request) GetHotelId() []string {
	if m != nil {
		return m.HotelId
	}
	return nil
}

func (m *Request) GetInDate() string {
	if m != nil {
		return m.InDate
	}
	return ""
}

func (m *Request) GetOutDate() string {
	if m != nil {
		return m.OutDate
	}
	return ""
}

func (m *Request) GetRoomNumber() int32 {
	if m != nil {
		return m.RoomNumber
	}
	return 0
}

func (m *Request) GetCBPayload() *cb.Payload {
	if m != nil {
		return m.CBPayload
	}
	return nil
}

type Result struct {
	HotelId   []string    `protobuf:"bytes,1,rep,name=hotelId,proto3" json:"hotelId,omitempty"`
	CBPayload *cb.Payload `protobuf:"bytes,10001,opt,name=CBPayload" json:"CBPayload,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetHotelId() []string {
	if m != nil {
		return m.HotelId
	}
	return nil
}

func (m *Result) GetCBPayload() *cb.Payload {
	if m != nil {
		return m.CBPayload
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "reservation.Request")
	proto.RegisterType((*Result)(nil), "reservation.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reservation service

type ReservationClient interface {
	ResetDB(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	// MakeReservation makes a reservation based on given information
	MakeReservation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	// CheckAvailability checks if given information is available
	CheckAvailability(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
}

type reservationClient struct {
	cc *grpc.ClientConn
}

func NewReservationClient(cc *grpc.ClientConn) ReservationClient {
	return &reservationClient{cc}
}

func (c *reservationClient) ResetDB(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/reservation.Reservation/ResetDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) MakeReservation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/reservation.Reservation/MakeReservation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) CheckAvailability(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/reservation.Reservation/CheckAvailability", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reservation service

type ReservationServer interface {
	ResetDB(context.Context, *Request) (*Result, error)
	// MakeReservation makes a reservation based on given information
	MakeReservation(context.Context, *Request) (*Result, error)
	// CheckAvailability checks if given information is available
	CheckAvailability(context.Context, *Request) (*Result, error)
}

func RegisterReservationServer(s *grpc.Server, srv ReservationServer) {
	s.RegisterService(&_Reservation_serviceDesc, srv)
}

func _Reservation_ResetDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).ResetDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/ResetDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).ResetDB(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_MakeReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).MakeReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/MakeReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).MakeReservation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}

	// ContextBus
	cbCtx, cbOK := ContextBus.FromPayload(ctx, in.GetCBPayload())
	_, _ = cbCtx, cbOK

	// ContextBus
	if cbOK {
		ContextBus.OnSubmission(cbCtx, &cb.EventWhere{}, &cb.EventRecorder{
			Type: cb.EventRecorderType_EventRecorderThirdParty,
			Name: "_Reservation_CheckAvailability_Handler.1",
		}, &cb.EventMessage{
			Attrs:   nil,
			Message: "CheckAvailability starts",
			Paths:   nil,
		})

		ctx = context.WithValue(ctx, cb_context.CB_CONTEXT_NAME, cbCtx)
	} else {
		log.Info().Msg("CheckAvailability starts")
	}

	var result interface{}
	var err error

	if interceptor == nil {
		result, err = srv.(ReservationServer).CheckAvailability(ctx, in)
	} else {
		info := &grpc.UnaryServerInfo{
			Server:     srv,
			FullMethod: "/reservation.Reservation/CheckAvailability",
		}
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(ReservationServer).CheckAvailability(ctx, req.(*Request))
		}
		result, err = interceptor(ctx, in, info, handler)
	}

	// ContextBus
	if cbOK { // todo: do payload
		res := result.(*Result)

		_ = res
		ContextBus.OnSubmission(cbCtx, &cb.EventWhere{}, &cb.EventRecorder{
			Type: cb.EventRecorderType_EventRecorderThirdParty,
			Name: "_Reservation_CheckAvailability_Handler.2",
		}, &cb.EventMessage{
			Attrs:   nil,
			Message: "CheckAvailability ends",
			Paths:   nil,
		})
	} else {
		log.Info().Msg("CheckAvailability ends")
	}

	return result, err
}

var _Reservation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reservation.Reservation",
	HandlerType: (*ReservationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetDB",
			Handler:    _Reservation_ResetDB_Handler,
		},
		{
			MethodName: "MakeReservation",
			Handler:    _Reservation_MakeReservation_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _Reservation_CheckAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation/proto/reservation.proto",
}

func init() { proto.RegisterFile("reservation/proto/reservation.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0x3b, 0x31,
	0x10, 0xc6, 0xc9, 0xbf, 0xff, 0xb6, 0x74, 0xaa, 0x88, 0xb1, 0x48, 0x28, 0x28, 0x4b, 0xbd, 0xec,
	0xa9, 0x85, 0xd6, 0xa3, 0x08, 0xb6, 0xbd, 0x78, 0xb0, 0x48, 0x2e, 0x82, 0x17, 0xc9, 0x6e, 0x07,
	0xba, 0x74, 0x77, 0xa3, 0xc9, 0xa4, 0xd8, 0xc7, 0xf0, 0x91, 0x7c, 0x01, 0x9f, 0x49, 0x1a, 0xb7,
	0x34, 0xf5, 0x56, 0x6f, 0x3b, 0xbf, 0x99, 0x6f, 0xf8, 0xf6, 0xcb, 0xc0, 0x95, 0x41, 0x8b, 0x66,
	0xa5, 0x28, 0xd3, 0xe5, 0xe0, 0xd5, 0x68, 0xd2, 0x83, 0x80, 0xf4, 0x3d, 0xe1, 0xed, 0x00, 0x75,
	0x2f, 0x52, 0x5d, 0x12, 0xbe, 0xd3, 0x4b, 0xe2, 0xec, 0x20, 0xf8, 0xfe, 0x99, 0xed, 0x7d, 0x31,
	0x68, 0x4a, 0x7c, 0x73, 0x68, 0x89, 0xf7, 0xe0, 0x28, 0x75, 0x96, 0x74, 0x81, 0x66, 0xa6, 0x0a,
	0x14, 0x2c, 0x62, 0x71, 0x4b, 0xee, 0x31, 0x2e, 0xa0, 0xb9, 0xd0, 0x84, 0xf9, 0xfd, 0x5c, 0xfc,
	0x8b, 0x6a, 0x71, 0x4b, 0x6e, 0x4b, 0x7e, 0x0e, 0x8d, 0xac, 0x9c, 0x2a, 0x42, 0x51, 0xf3, 0xba,
	0xaa, 0xda, 0x28, 0xb4, 0x23, 0xdf, 0xf8, 0xef, 0x1b, 0xdb, 0x92, 0x5f, 0x02, 0x18, 0xad, 0x8b,
	0x99, 0x2b, 0x12, 0x34, 0xa2, 0x1e, 0xb1, 0xb8, 0x2e, 0x03, 0xc2, 0x47, 0xd0, 0x9a, 0x8c, 0x1f,
	0xd5, 0x3a, 0xd7, 0x6a, 0x2e, 0x3e, 0x66, 0x11, 0x8b, 0xdb, 0xc3, 0x4e, 0x3f, 0xfc, 0x87, 0xaa,
	0x29, 0x77, 0x73, 0xbd, 0x27, 0x68, 0x48, 0xb4, 0x2e, 0xa7, 0xd0, 0x2a, 0xdb, 0xb7, 0xfa, 0x97,
	0xc5, 0xc3, 0x4f, 0x06, 0x6d, 0xb9, 0x0b, 0x96, 0x5f, 0x6f, 0x82, 0xb3, 0x48, 0xd3, 0x31, 0xef,
	0xf4, 0xc3, 0x47, 0xa8, 0xe2, 0xec, 0x9e, 0xfd, 0xa2, 0xde, 0xd4, 0x0d, 0x9c, 0x3c, 0xa8, 0x25,
	0x86, 0x8b, 0x0e, 0x50, 0xdf, 0xc2, 0xe9, 0x64, 0x81, 0xe9, 0xf2, 0x6e, 0xa5, 0xb2, 0x5c, 0x25,
	0x59, 0x9e, 0xd1, 0xfa, 0x00, 0xfd, 0xf8, 0xf8, 0x39, 0xbc, 0x8d, 0xa4, 0xe1, 0x6f, 0x60, 0xf4,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x83, 0xf0, 0xd2, 0x56, 0x02, 0x00, 0x00,
}
